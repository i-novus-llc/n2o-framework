<?xml version='1.0' encoding='UTF-8'?>
<query xmlns="http://n2oapp.net/framework/config/schema/query-4.0" object-id="testSqlQuery">
    <list>
        <mongodb collection-name="user" operation="find"/>
    </list>
    <count>
        <mongodb collection-name="user" operation="countDocuments"/>
    </count>

    <fields>
        <field id="id" domain="string">
            <select mapping="['_id'].toString()">_id</select>
            <filters>
                <eq filter-id="id">{ _id: new ObjectId('#id') }</eq>
                <in filter-id="idIn" normalize="T(net.n2oapp.framework.test.TestMongoConfiguration).mapIdIn(#this)" domain="string">{ _id: {$in: #idIn }}</in>
            </filters>
            <sorting/>
        </field>

        <field id="name" domain="string">
            <select>name</select>
            <filters>
                <eq filter-id="name"/>
                <notEq filter-id="notName"/>
                <in filter-id="userNameIn" domain="string[]"/>
                <like filter-id="nameLike" mapping="['nameLikeMap']">{ name: { $regex: '.*#nameLikeMap.*'}}</like>
                <likeStart filter-id="nameStart">{ name: {$regex: '#nameStart.*'}}</likeStart>
            </filters>
            <sorting mapping="['sortName']">name :sortName</sorting>
        </field>

        <field id="userAge" domain="integer">
            <select mapping="['age']">age</select>
            <filters>
                <in filter-id="userAgeIn">{age: {$in: #userAgeIn}}</in>
                <notIn filter-id="userAgeNotIn">{age: {$nin: #userAgeNotIn}}</notIn>
            </filters>
            <sorting/>
        </field>

        <field id="birthday" domain="localdate">
            <select/>
            <filters>
                <more filter-id="birthdayMore">{birthday: {$gte: new ISODate(#birthdayMore)}}</more>
                <less filter-id="birthdayLess">{birthday: {$lte: new ISODate(#birthdayLess)}}</less>
            </filters>
        </field>

        <field id="vip">
            <select/>
        </field>

        <field id="gender.id" domain="integer">
            <select mapping="['gender']?.get('id')"/>
            <filters>
                <eq filter-id="gender.id" domain="integer"/>
            </filters>
        </field>

        <field id="gender.name">
            <select mapping="['gender']?.get('name')" normalize="#this?.toLowerCase()"/>
        </field>
    </fields>
</query>
