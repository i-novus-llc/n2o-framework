{
  "extends": [
    "react-app",
    "airbnb"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "eslint-plugin-import",
    "optimize-regex",
    "sonarjs",
    "import"
  ],
  "ignorePatterns": ["*.test.js", "*.test.jsx"],
  "rules": {
    "jsx-a11y/control-has-associated-label": 1,
    // without ";"
    "semi": ["error", "never"],
    "no-restricted-syntax": ["error", "ForInStatement", "LabeledStatement", "WithStatement"],
    // Цикломатическая сложность, надо плавно понижать до 10
    "complexity": ["error", { "max": 20 }],
    // Символ переноса строки в коде
    "linebreak-style": ["off"],
    // Везде одиночные кавычкии
    "quotes": ["error", "single"],
    // Ширина строк
    "max-len": [
      "error",
      {
        "code": 120,
        "ignoreComments": true,
        "ignoreTrailingComments": true,
        "ignoreUrls": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true
      }
    ],
    // Отступы
    "indent": ["error", 4, {"SwitchCase": 1}],
    "react/jsx-indent": ["error", 4],
    "react/jsx-indent-props": ["error", 4],
    "spaced-comment": ["error", "always"],
    // Разбитие импортов на группы
    "import/order": [
      "error", {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index"],
        "newlines-between": "always"
      }
    ],
    // Дефолтного экспорта быть не должно
    "import/prefer-default-export": "off",
    "import/extensions": ["error", "always", {
      "ts": "never",
      "tsx": "never",
      "js": "never",
      "jsx": "never"
    }],
    // Отступы внутри объектов и массивов
    "object-curly-spacing": ["error", "always"],
    // Не выносить контент объектов на отдельную строку
    "object-curly-newline": ["off"],
    // Разрешить стрелочным функциям не оборачивать единственный параметр в скобки
    "arrow-parens": ["error", "as-needed", {"requireForBlockBody": true}],
    // Разрешает в дочерних скоупах создавать переменные с теми же именами
    "no-shadow": ["off"],
    // Разрешает переприсваивать значение аргументам функций
    "no-param-reassign": ["off"],
    // Теперь не будет требовать дефолты для обязательных параметров
    "react/require-default-props": ["off"],
    // Теперь можно использовать any в propTypes
    "react/forbid-prop-types": ["off"],
    "react/prop-types": ["off"],
    // Теперь при сравнении можно писать числа слева от знака, н.р.: 6 < from
    "yoda": ["off"],
    // Запрет <a href="#"> или <a href="javascript:void(0)">
    "jsx-a11y/anchor-is-valid": ["error", {"aspects": ["invalidHref"]}],
    // Теперь при совпаднии значений htmlFor у элемента и id у инпута не будет ошибки
    "jsx-a11y/label-has-associated-control": ["error", {"required": {"some": ["nesting", "id"]}}],
    // Выключаем, чтоб можно было использовать await в циклах
    "no-await-in-loop": ["off"],
    // Выключаем, чтоб можно было использовать setState в componentDidUpdate
    "react/no-did-update-set-state": ["off"],
    // Из за эффекта всплытия можно использовать функции и классы до их объявления, но с переменными не так.
    // Почему то работает тоько error и off, а ["error", { "functions": false, "classes": false }] - не воспринимается (
    "no-use-before-define": ["off"],
    // Легализация ++/-- в циклах
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
    // Обязательные фигурные скобки
    "curly": ["error", "all"],
    // Перенос строки в логических операторах
    "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],
    //
    "optimize-regex/optimize-regex": "warn",
    // Пустая стока перед return
    //    "newline-before-return": "error",
    // Пустая стока после блока объявления переменных переменными
    //    "newline-after-var": ["error", "always"],
    "padding-line-between-statements": [
      "error",
      // Вставлять пробел после блока переменных
      { "blankLine": "always", "prev": ["const", "let", "var"], "next": "*" },
      { "blankLine": "any", "prev": ["const", "let", "var"], "next": ["const", "let", "var"] },
      // Вставлять пробел перед return
      { "blankLine": "always", "prev": "*", "next": "return" },
      // Вставлять пробел перед break
      { "blankLine": "always", "prev": "*", "next": "break" }
    ],
    // Если есть onClick, то key events теперь не обязательны
    "jsx-a11y/click-events-have-key-events": "off",
    // Теперь можно вешать обработчики на статические элементы, а не только на кнопки, чекбоксы, поля и прочее
    "jsx-a11y/no-static-element-interactions": "off",
    // Теперь в input можно передавать autoFocus
    "jsx-a11y/no-autofocus": "off",
    // off правил. иначе падает ошибка: Definition for rule was not found
    "react/jsx-curly-newline": "off", // TODO ["error", { "multiline": "require", "singleline": "forbid" }]
    "react/state-in-constructor": "off",
    "react/static-property-placement": "off",
    "react/jsx-props-no-spreading": "off",
    // Убираем сортировку методов
    "react/sort-comp": "off",
    // Расширения файлов, которые могут содержать jsx
    "react/jsx-filename-extension": [2, { "extensions": [".jsx", ".tsx"] }],
    // Sonar
    // Bug Detection
    // Дублировние кода в if-else, switch ветках
    "sonarjs/no-all-duplicated-branches": "error",
    // Переприсваивание значений
    "sonarjs/no-element-overwrite": "error",
    // Вызов функции только с описанными аргументами
    "sonarjs/no-extra-arguments": "error",
    // Идентичные выражения с обеих сторон бинарных операторов
    "sonarjs/no-identical-expressions": "error",
    // Обход массива с одним элементом
    "sonarjs/no-one-iteration-loop": "error",
    // Попытка использования резульата функции, которая ничего не возвращает
    "sonarjs/no-use-of-empty-return-value": "error",
    // Code Smell Detection
    // Схлопывание вложенных if  в один
    "sonarjs/no-collapsible-if": "error",
    // Отказ от проверки отрицательной на размер коллекций, и что он ">=0"
    "sonarjs/no-collection-size-mischeck": "error",
    // Дублирование if, switch веток
    "sonarjs/no-duplicated-branches": "error",
    // Дублировние функций
    "sonarjs/no-identical-functions": "error",
    // Инвертирование булевых операций
    "sonarjs/no-inverted-boolean-check": "error",
    // Сравнение булевых тип внутри условий (if(some == true){...})
    "sonarjs/no-redundant-boolean": "error",
    // Прерывание выполнения, которое и так произойдёт (неуместные break/return/continue)
    "sonarjs/no-redundant-jump": "error",
    // Дублировние if с одинаковым условием
    "sonarjs/no-identical-conditions": "error",
    // Отказ от switch на 1-2 ветки
    "sonarjs/no-small-switch": "error",
    // Чуть более умный no-unused-vars
    "sonarjs/no-unused-collection": "error",
    // Бесполезные / пустые catch
    "sonarjs/no-useless-catch": "error",
    // Присваивание переменной сразу же перед тем как её вернуть
    "sonarjs/prefer-immediate-return": "error",
    // if(true) { return true } else { return false }
    "sonarjs/prefer-single-boolean-return": "error"
  },
  "overrides": [
    // Typescript
    {
      "files": ["*.ts", "*.tsx"],
      "extends": [
        "plugin:@typescript-eslint/recommended"
        // "plugin:@typescript-eslint/recommended-requiring-type-checking",
      ],
      "plugins": [
        "@typescript-eslint"
      ],

      "parserOptions": {
        "project": ["./tsconfig.json"]
      },
      "rules": {
        "@typescript-eslint/array-type": ["error", { "default": "array-simple" }],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": ["error", {
          "ts-expect-error": "allow-with-description",
          "ts-ignore": "allow-with-description",
          "ts-nocheck": "allow-with-description",
          "ts-check": "allow-with-description",
          "minimumDescriptionLength": 10
        }],
        "@typescript-eslint/consistent-type-exports": "error",
        "@typescript-eslint/consistent-type-imports": "off",
        "@typescript-eslint/method-signature-style": ["error", "method"],
        "@typescript-eslint/naming-convention": "off",
        "@typescript-eslint/no-confusing-non-null-assertion": "warn",
        "@typescript-eslint/no-duplicate-enum-values": "warn",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "warn",
        "@typescript-eslint/no-explicit-any": "error",
        // Запрет повторных Required модификаторов поля через "!."
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        // Запрет чисто статических классов
        "@typescript-eslint/no-extraneous-class": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-inferrable-types": ["error", {
          "ignoreParameters": false,
          "ignoreProperties": true
        }],
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-redundant-type-constituents": "warn",
        "@typescript-eslint/no-require-imports": "warn",
        "@typescript-eslint/no-var-requires": "warn",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
        "@typescript-eslint/no-unnecessary-type-constraint": "warn",
        "@typescript-eslint/no-useless-empty-export": "warn",
        "@typescript-eslint/prefer-enum-initializers": "warn",
        "@typescript-eslint/prefer-includes": "warn",
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/prefer-readonly": "warn",
        "@typescript-eslint/prefer-return-this-type": "warn",
        "@typescript-eslint/prefer-string-starts-ends-with": "warn",
        "@typescript-eslint/require-array-sort-compare": "warn",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/type-annotation-spacing": ["error", {
          "before": false,
          "after": true,
          "overrides": {
            "arrow": {"before": true, "after": true }
          }
        }],
        "@typescript-eslint/brace-style": ["error", "1tbs", { "allowSingleLine": true }],
        "@typescript-eslint/comma-spacing": ["error"],
        "@typescript-eslint/default-param-last": ["error"],
        "@typescript-eslint/indent": ["error", 4, {"SwitchCase": 1}],
        "@typescript-eslint/no-dupe-class-members": ["error"],
        "@typescript-eslint/no-throw-literal": ["error"],
        "@typescript-eslint/no-unused-expressions": ["error"],
        "@typescript-eslint/no-unused-vars": ["error"],
        "@typescript-eslint/no-useless-constructor": ["error"],
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/return-await": "error",
        "@typescript-eslint/quotes": ["error", "single"],
        "@typescript-eslint/semi": ["error", "never"]
      }
    }
  ],
  "globals": {
    // Для тестов
    "mount": true,
    "shallow": true
  },
  "settings": {
    "import/resolver": {
      "typescript": {
        // this loads <rootdir>/tsconfig.json to eslint
      }
    }
  }
}
